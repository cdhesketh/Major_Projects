plot(h,col=c("white","red")[cuts])
cuts=cut(h$breaks,c(-Inf,-0.000001,Inf))
plot(h,col=c("white","red")[cuts])
#create histogram
h=hist(bsStat,breaks=100,plot=F)
cuts=cut(h$breaks,c(-Inf,-0.000001,Inf))
plot(h,col=c("white","red")[cuts])
plot(h,main="Bias Toward Higher Men Salaries",col=c("white","red")[cuts])
p.val.bs
#bootstraping
for(i in 1:1000000){
#creating populations to use in bootstraping statistic
femBS[i]=mean(sample(femalesKeep,104,replace=T))
maleBS[i]=mean(sample(males,115,replace=T))
#creating bootstraping statistic
bsStat[i]=maleBS[i]-femBS[i]
}
#Generate P-values for boostraping using >0 as the cut off for difference
p.val.bs = length(bsStat[bsStat>0])/length(bsStat)
p.val.bs
for(i in 1:1000000){
#creating populations to use in bootstraping statistic
femBS[i]=mean(sample(femalesKeep,104,replace=T))
maleBS[i]=mean(sample(males,115,replace=T))
#creating bootstraping statistic
bsStat[i]=femBS[i]-maleBS[i]
#bootstraping
for(i in 1:1000000){
#creating populations to use in bootstraping statistic
femBS[i]=mean(sample(femalesKeep,104,replace=T))
maleBS[i]=mean(sample(males,115,replace=T))
#creating bootstraping statistic
bsStat[i]=femBS[i]-maleBS[i]
}
knitr::opts_chunk$set(echo = TRUE)
trivariatenormal <- read.table("C:/Users/Amanda/Desktop/Math 534/Homework 10/trivariatenormal.dat", quote="\"", comment.char="",header=T)
knitr::opts_chunk$set(echo = TRUE)
trivariatenormal <- read.table("trivariatenormal.dat", quote="\"", comment.char="",header=T)
View(trivariatenormal)
attach(trivariatenormal)
setwd("C:/Users/User/Desktop/School/Math_534/HW/HW5")
mu=c(0,0,0)
sig=matrix(c(1,0,0,0,1,0,0,0,1),3,3)
maxit=50
em=function(X,mu,sig,maxit){
#browser()
n=dim(X)[1]
p=dim(X)[2]
it=0
stop=0
header=paste0("  it","   mu1  ","    mu3  ","   Sig11","    Sig13  ","   ||grad||   ")
print(header,quote = FALSE)
while(it<maxit && stop==0){
it=it+1
ex1=matrix(0,p,1)
exx1=matrix(0,p,p)
for(i in 1:n){
ex=t(as.matrix(X[i,]))
exx=matrix(0,p,p)
obs=which(!is.na(X[i,]))
mis=which(is.na(X[i,]))
if(any(is.na(X[i,]))==TRUE ){
mu_o=matrix(mu[obs])
mu_m=matrix(mu[mis])
Soo = matrix(sig[obs,obs], length(obs), length(obs))
Smo = matrix(sig[mis,obs], length(mis), length(obs))
Som = matrix(sig[obs,mis], length(obs), length(mis))
Smm = matrix(sig[mis,mis], length(mis), length(mis))
yo=t(as.matrix(X[i,obs]))
y.m.star=mu_m+Smo%*%solve(Soo)%*%(yo-mu_o)
ex[mis]=y.m.star
exx[obs,obs] = yo%*%t(yo)
exx[mis,obs] = y.m.star%*%t(yo)
exx[obs,mis] = yo%*%t(y.m.star)
exx[mis,mis] = Smm-Smo%*%solve(Soo)%*%Som+y.m.star%*%t(y.m.star)
}
else{
yo=t(as.matrix(X[i,obs]))
exx[obs,obs]=yo%*%t(yo)
}
ex1=ex+ex1
exx1=exx+exx1
}
# e-step
#
x.bar.star=ex1/n
s.star=exx1/n
#m-step
#
mu.hat=x.bar.star
sig.hat=s.star-x.bar.star%*%t(x.bar.star)
# gradient
#
invsig=solve(sig)
gradM=-n*invsig%*%(mu-x.bar.star)
A = s.star-mu%*%t(x.bar.star)-x.bar.star%*%t(mu)+mu%*%t(mu)
B = invsig%*%(sig-A)%*%invsig
C=(-n/2)*(B+t(B)-diag(diag(B)))
gradS=C[upper.tri(C,diag = TRUE)==TRUE]
grad=matrix(0,p+p*(p+1)/2,1)
grad[1:p] = gradM
grad[(p+1):length(grad)] = gradS
norm=norm(grad,type = "f")
# reassigning mu and sig
#
if(it==1||it==2||it==3||it==33||it==34||it==35){
print(sprintf(' %2.0f %8.5f %8.5f %8.5f %8.5f %8.7f ',(it-1),mu[1],mu[3],sig[1,1],sig[1,3],norm),quote=FALSE)
}
mu=mu.hat
sig=sig.hat
if(norm<1e-6)stop=1
}
list(mu=mu,sig=sig)
}
em(trivariatenormal,mu,sig,maxit)
knitr::opts_chunk$set(echo = TRUE)
mcnorm <- function (n, a, b) {
x = runif(n,a,b)
g = exp(-x)/(1+x^2)
tetah=(b-a)*mean(g) # this is the Monte Carlo approximation to the integral
tetah_se=(b-a)*sd(g)/sqrt(n) #This is the standard error of the approimation
list(tetah=tetah,tetah_se=tetah_se)
}
n = 20000
a=0; b=1
I.4 = mcnorm(n,a,b)
output <- data.frame( M_C_approx = I.4$tetah, S.E. = I.4$tetah_se)
print(output)
u = runif(n/2,0,1)
gu1 = exp(-u)/(1+u^2)
gu2 = exp(-(1-u))/(1+(1-u)^2)
tetah_b = sum(gu1+gu2)/n
tetaha_b_se = sd(gu1+gu2)/sqrt(n)
print(c(tetah_b,tetaha_b_se))
cor(gu1,gu2)
a.2=function(u){
x=-log(1-(1-1/exp(1))*u)
return(x)
}
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
n=20000
a=0
b=1
mca = function (n, a, b) {
u = runif(n,a,b)
x = a.2(u)
g = (exp(-x)/(1+x^2))/(exp(-x)/(1-1/exp(1)))
tetahb=mean(g)
tetah_seb=sd(g)/sqrt(n)
list(tetah=tetahb,tetah_se=tetah_seb)
}
mca(n,a,b)
c = runif(n/2,0,1)
u = a.2(c)
gu1 = exp(-u)/(1+u^2)
gu2 = exp(-(1-u))/(1+(1-u)^2)
tetah_c = sum(gu1+gu2)/n
tetaha_c_se = sd(gu1+gu2)/sqrt(n)
print(c(tetah_c,tetaha_c_se))
library(MASS)
hitmiss <- function (n, mu, sigma,a , b, c) {
s=mvrnorm( n, mu, sigma, tol = 1e-6, empirical = FALSE)
tetah = sum(s[,1]<a & s[,2]<b & s[,3]<c)/n # this is the hit-miss approximation to the integral
tetah_se = sqrt((tetah-tetah^2)/n) #This is the standard error of the approimation
return(list(tetah=tetah,tetah_se=tetah_se))
}
n = 20000
a=1; b=4; c=2
mu=c(0,0,0)
sigma = matrix(c(1,3/5,1/3,3/5,1,11/15,1/3,11/15,1),3,3)
I = hitmiss(n, mu, sigma, a, b, c)
I
theta = I$tetah
stdv = I$tetah_se
z = qnorm(.9725,0,1)
lower.bound = theta-z*stdv
upper.bound = theta+z*stdv
print("       Confidence Interval",quote = FALSE)
paste0("(", lower.bound ,",",upper.bound  ,")")
n = 20000
mu = exp(-.5)*atan(1)
x = runif(n,0,1)
g = (1/(1+x^2))*exp(-x)
h = (1/(1+x^2))*exp(-.5)
c.star = -cov(h,g)/var(h)
theta.hat.c = sum(g+c.star*(h-mu))/n
theta.hat.c = mean(g+c.star*(h-mu))
theta.hat.c
sqrt(I.4$tetah_se^2-cor(g,h)^2*I.4$tetah_se^2)
var.cv=(1/n)*(var(g)-(cov(g,h)^2)/var(h))
se.cv=sqrt(var.cv)
se.cv
n = 20000
u = runif(n,0,1)
x=1-sqrt(1-u)
g = (1/(1+x^2))*exp(-x)
h = (1/(1+x^2))*exp(-.5)
f=2*(1-x)
gf=g/f
hf=h/f
mu=exp(-.5)*atan(1)
c.star = -cov(hf,gf)/var(hf)
theta.hat.c = sum(gf+c.star*(hf-mu))/n
theta.hat.c = mean(gf+c.star*(hf-mu))
theta.hat.c
var.cv=(1/n)*(var(gf)-(cov(gf,hf)^2)/var(hf))
se.cv=sqrt(var.cv)
se.cv
library(ggplot2)
library(plot3D)
library(dplyr)
library(tidyr)
library(rpart)
library(adabag)
library(randomForest)
library(ROCR)
library(gbm)
#esquisse::esquisser(iPitch)
ballErr=.1
ballStrikeErr=.1
ballDistLim=0.13
strikeDistLim=0.1
setwd("C:\\Users\\User\\Desktop\\School\\Math_536\\Final")
pitches=read.csv("baseball.csv",stringsAsFactors=FALSE)
pitches$X=as.integer(pitches$X)
pitches$plate_x=as.double(pitches$plate_x)
pitches$plate_z=as.double(pitches$plate_z)
pitches=pitches[complete.cases(pitches),]
strike=pitches[pitches$description=="called_strike",]
ball=pitches[pitches$description=="ball",]
strikeDist=matrix(0,dim(strike)[1],2)
ballDist=matrix(0,dim(ball)[1],2)
ggplot(pitches) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal()
ggplot(pitches) +
aes(x = plate_x, y = plate_z, colour = count) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb","#eb34cc","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
print(dim(ball))
for (j in 1:dim(ball)[1])
{
ballTemp=cbind(ball$X,sqrt((ball$plate_x-ball$plate_x[j])^2+(ball$plate_z-ball$plate_z[j])^2))
ballTemp=ballTemp[!(ballTemp[,2]==0),]
if(min(ballTemp[,2])>ballErr)
{
ball=ball[!(ball$X==ball$X[j]),]
j=j-1
}
}
for (j in 1:dim(strike)[1])
{
ballTemp=cbind(strike$X,sqrt((strike$plate_x-strike$plate_x[j])^2+(strike$plate_z-strike$plate_z[j])^2))
ballTemp=ballTemp[!(ballTemp[,2]==0),]
if(min(ballTemp[,2])>ballStrikeErr)
{
strike=strike[!(strike$X==strike$X[j]),]
j=j-1
}
}
#temp=ball[ball$plate_x>.2]
#temp=temp[temp$plate_x<.25]
#temp=temp[temp$plate_z>2.5]
#temp=temp[temp$plate_z<3]
#temp
#which(ball$X==13612)
for(i in 1:dim(strike)[1])
{
ballTemp=cbind(ball$X,sqrt((ball$plate_x-strike$plate_x[i])^2+(ball$plate_z-strike$plate_z[i])^2))
strikeDist[i,]=c(strike$X[i],min(abs(ballTemp[,2])))
}
strikeDist=strikeDist[!(strikeDist[,1]==0),]
for(i in 1:dim(ball)[1])
{
ballTemp=cbind(strike$X,sqrt((strike$plate_x-ball$plate_x[i])^2+(strike$plate_z-ball$plate_z[i])^2))
ballDist[i,]=c(ball$X[i],min(abs(ballTemp[,2])))
}
ballDist=ballDist[!(ballDist[,1]==0),]
strikeFinal=strikeDist[strikeDist[,2]<strikeDistLim,]
ballFinal=ballDist[ballDist[,2]<ballDistLim,]
iStrike=pitches[pitches$X %in% strikeFinal[,1],]
iBall=pitches[pitches$X %in% ballFinal[,1],]
iPitch=rbind(iStrike,iBall)
#esquisse::esquisser(iPitch)
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal()
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = count) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb","#eb34cc","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
iPitch$count=""
iPitch[iPitch$balls==3 & iPitch$strikes<2,]$count="notFull"
iPitch[iPitch$balls==3 & iPitch$strikes==2,]$count="Full"
iPitch[!(iPitch$balls==3),]$count="not3"
iPitch$description=as.factor(iPitch$description)
iPitch$pitch_type=as.factor(iPitch$pitch_type)
iPitch$count=as.factor(iPitch$count)
as.numeric(iPitch[1,])
model.rf = randomForest(description~plate_x+plate_z+count+release_speed+pitch_type+home_score+away_score,
data=iPitch,ntree=100,mtry=2,control=rpart.control(minsplit=100,cp=.05))
model.rf$importance
prediction.rf = model.rf$predicted
table(prediction.rf,iPitch$description)
model.ab = boosting(description~plate_x+plate_z+count+release_speed+pitch_type+home_score+away_score,
data=iPitch,mfinal=100,control=rpart.control(minsplit=100,cp=.02))
model.ab$votes
prediction.ab = model.ab$class
table(prediction.ab,iPitch$description)
model.ab$importance
library(ggplot2)
library(plot3D)
library(dplyr)
library(tidyr)
library(rpart)
library(adabag)
library(randomForest)
library(ROCR)
library(gbm)
#esquisse::esquisser(iPitch)
ballErr=.1
ballStrikeErr=.1
ballDistLim=0.13
strikeDistLim=0.1
setwd("C:\\Users\\User\\Desktop\\School\\Math_536\\Final")
pitches=read.csv("baseball.csv",stringsAsFactors=FALSE)
pitches$X=as.integer(pitches$X)
pitches$plate_x=as.double(pitches$plate_x)
pitches$plate_z=as.double(pitches$plate_z)
pitches=pitches[complete.cases(pitches),]
strike=pitches[pitches$description=="called_strike",]
ball=pitches[pitches$description=="ball",]
strikeDist=matrix(0,dim(strike)[1],2)
ballDist=matrix(0,dim(ball)[1],2)
ggplot(pitches) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal()
ggplot(pitches) +
aes(x = plate_x, y = plate_z, colour = count) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb","#eb34cc","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
print(dim(ball))
for (j in 1:dim(ball)[1])
{
ballTemp=cbind(ball$X,sqrt((ball$plate_x-ball$plate_x[j])^2+(ball$plate_z-ball$plate_z[j])^2))
ballTemp=ballTemp[!(ballTemp[,2]==0),]
if(min(ballTemp[,2])>ballErr)
{
ball=ball[!(ball$X==ball$X[j]),]
j=j-1
}
}
for (j in 1:dim(strike)[1])
{
ballTemp=cbind(strike$X,sqrt((strike$plate_x-strike$plate_x[j])^2+(strike$plate_z-strike$plate_z[j])^2))
ballTemp=ballTemp[!(ballTemp[,2]==0),]
if(min(ballTemp[,2])>ballStrikeErr)
{
strike=strike[!(strike$X==strike$X[j]),]
j=j-1
}
}
#temp=ball[ball$plate_x>.2]
#temp=temp[temp$plate_x<.25]
#temp=temp[temp$plate_z>2.5]
#temp=temp[temp$plate_z<3]
#temp
#which(ball$X==13612)
for(i in 1:dim(strike)[1])
{
ballTemp=cbind(ball$X,sqrt((ball$plate_x-strike$plate_x[i])^2+(ball$plate_z-strike$plate_z[i])^2))
strikeDist[i,]=c(strike$X[i],min(abs(ballTemp[,2])))
}
strikeDist=strikeDist[!(strikeDist[,1]==0),]
for(i in 1:dim(ball)[1])
{
ballTemp=cbind(strike$X,sqrt((strike$plate_x-ball$plate_x[i])^2+(strike$plate_z-ball$plate_z[i])^2))
ballDist[i,]=c(ball$X[i],min(abs(ballTemp[,2])))
}
ballDist=ballDist[!(ballDist[,1]==0),]
strikeFinal=strikeDist[strikeDist[,2]<strikeDistLim,]
ballFinal=ballDist[ballDist[,2]<ballDistLim,]
iStrike=pitches[pitches$X %in% strikeFinal[,1],]
iBall=pitches[pitches$X %in% ballFinal[,1],]
iPitch=rbind(iStrike,iBall)
#esquisse::esquisser(iPitch)
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal()
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = count) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb","#eb34cc","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
iPitch$count=""
iPitch[iPitch$balls==3 & iPitch$strikes<2,]$count="notFull"
iPitch[iPitch$balls==3 & iPitch$strikes==2,]$count="Full"
iPitch[!(iPitch$balls==3),]$count="not3"
iPitch$description=as.factor(iPitch$description)
iPitch$pitch_type=as.factor(iPitch$pitch_type)
iPitch$count=as.factor(iPitch$count)
as.numeric(iPitch[1,])
model.rf = randomForest(description~plate_x+plate_z+count+release_speed+pitch_type+home_score+away_score,
data=iPitch,ntree=100,mtry=2,control=rpart.control(minsplit=100,cp=.05))
model.rf$importance
prediction.rf = model.rf$predicted
table(prediction.rf,iPitch$description)
ggplot(pitches) +
aes(x = plate_x, y = plate_z) +
geom_point(size = 1L)+
theme_minimal() +
facet_wrap(vars(description))
scale_color_manual(values=c("#3495eb") +
ggplot(pitches) +
aes(x = plate_x, y = plate_z) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb")) +
theme_minimal() +
facet_wrap(vars(description))
)
esquisse::esquisser(pitches)
ggplot(pitches) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = count) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb","#eb34cc","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal()
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = description) +
geom_point(size = 1L) +
scale_color_manual(values=c("#FF3333","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
ggplot(iPitch) +
aes(x = plate_x, y = plate_z, colour = count) +
geom_point(size = 1L) +
scale_color_manual(values=c("#3495eb","#eb34cc","#000066")) +
theme_minimal() +
facet_wrap(vars(description))
