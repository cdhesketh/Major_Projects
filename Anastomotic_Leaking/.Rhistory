testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
temppredict.glm(model,newdata=trainData)
pred=pred+temp$residual.scale
}
print(paste0(j,"            ",pred/j))
}
print("k:            Sum(Dispersion)/n")
for(j in 2:10)
{
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
temp=predict.glm(model,newdata=trainData)
pred=pred+temp$residual.scale
}
print(paste0(j,"            ",pred/j))
}
j=2
i=1
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
print("k:            Sum(Dispersion)/n")
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
predict.glm(model,newdata=trainData)
temp=predict.glm(model,newdata=trainData)
names(temp)
temp
names(model)
temp=predict.glm(model,newdata=trainData,se.fit = T)
names(temp)
temp$se.fit
temp$residual.scale
print("k:            Sum(Dispersion)/n")
for(j in 2:10)
{
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
temp=predict.glm(model,newdata=trainData,se.fit = T)
pred=pred+temp$residual.scale
}
print(paste0(j,"            ",pred/j))
}
temp
library(car)
library(boot)
setwd("C:\\Users\\User\\Desktop\\School\\Math_536\\HW\\HW3")
Data=read.csv("colon2017.csv")
head(Data)
drops=c("Diagnosis.ICD9.Code","CPT.Code","Procedure","Incision.Start","Incision.Close")
Data2=Data[,!(names(Data) %in% drops)]
head(Data2)
Data2$Race=as.character(Data2$Race)
fixes=c("White","white","White ","W")
Data2[Data2$Race %in% fixes,][,7]="W"
unique(Data2$Race)
as.character(temp[1,7])==as.character(temp[2,7])
temp[1,7]==temp[2,7]
drops=c("Anastamotic.Leak")
x=Data2[,!(names(Data2) %in% drops)]
y=Data2[,"Anastamotic.Leak"]
Data2$Operative.Length=Data2$Operative.Length*24
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
view(Data2)
view(Data2)
library(car)
library(boot)
setwd("C:\\Users\\User\\Desktop\\School\\Math_536\\HW\\HW3")
Data=read.csv("colon2017.csv")
head(Data)
drops=c("Diagnosis.ICD9.Code","CPT.Code","Procedure","Incision.Start","Incision.Close")
Data2=Data[,!(names(Data) %in% drops)]
head(Data2)
Data2$Race=as.character(Data2$Race)
fixes=c("White","white","White ","W")
Data2[Data2$Race %in% fixes,][,7]="W"
unique(Data2$Race)
as.character(temp[1,7])==as.character(temp[2,7])
temp[1,7]==temp[2,7]
drops=c("Anastamotic.Leak")
x=Data2[,!(names(Data2) %in% drops)]
y=Data2[,"Anastamotic.Leak"]
Data2$Operative.Length=Data2$Operative.Length*24
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
#based on summary, Albumin is not statistically significant to include, rerunning model without Albumin
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
View(Data2)
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
help("cv.glm")
cv.glm(data=Data2,glmfit=model,K=10)
cv.glm(data=Data2,glmfit=model,K=10)$delta
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
cv.glm(data=Data2,glmfit=model,K=10)$delta
model = glm(Anastamotic.Leak~Gender+BMI+Age+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
cv.glm(data=Data2,glmfit=model,K=10)$delta
library(car)
library(boot)
setwd("C:\\Users\\User\\Desktop\\School\\Math_536\\HW\\HW3")
Data=read.csv("colon2017.csv")
head(Data)
drops=c("Diagnosis.ICD9.Code","CPT.Code","Procedure","Incision.Start","Incision.Close")
Data2=Data[,!(names(Data) %in% drops)]
head(Data2)
Data2$Race=as.character(Data2$Race)
fixes=c("White","white","White ","W")
Data2[Data2$Race %in% fixes,][,7]="W"
unique(Data2$Race)
as.character(temp[1,7])==as.character(temp[2,7])
temp[1,7]==temp[2,7]
drops=c("Anastamotic.Leak")
x=Data2[,!(names(Data2) %in% drops)]
y=Data2[,"Anastamotic.Leak"]
Data2$Operative.Length=Data2$Operative.Length*24
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
logLike=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
pred=predict.glm(model,newdata=testData,type="response")
logLike=logLike + sum((testData$Anastamotic.Leak*log(pred))+((1-testData$Anastamotic.Leak)*log(1-pred)) )
}
print(logLike)
library(car)
library(boot)
setwd("C:\\Users\\User\\Desktop\\School\\Math_536\\HW\\HW3")
Data=read.csv("colon2017.csv")
head(Data)
drops=c("Diagnosis.ICD9.Code","CPT.Code","Procedure","Incision.Start","Incision.Close")
Data2=Data[,!(names(Data) %in% drops)]
head(Data2)
Data2$Race=as.character(Data2$Race)
fixes=c("White","white","White ","W")
Data2[Data2$Race %in% fixes,][,7]="W"
unique(Data2$Race)
as.character(temp[1,7])==as.character(temp[2,7])
temp[1,7]==temp[2,7]
drops=c("Anastamotic.Leak")
x=Data2[,!(names(Data2) %in% drops)]
y=Data2[,"Anastamotic.Leak"]
Data2$Operative.Length=Data2$Operative.Length*24
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
set.seed(1)
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
logLike=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+Height..in.+Weight..lbs.+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
pred=predict.glm(model,newdata=testData,type="response")
logLike=logLike + sum((testData$Anastamotic.Leak*log(pred))+((1-testData$Anastamotic.Leak)*log(1-pred)) )
}
print(logLike)
set.seed(1)
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
logLike=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
pred=predict.glm(model,newdata=testData,type="response")
logLike=logLike + sum((testData$Anastamotic.Leak*log(pred))+((1-testData$Anastamotic.Leak)*log(1-pred)) )
}
print(logLike)
summary(model)
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
set.seed(1)
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
logLike=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Cancer+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
pred=predict.glm(model,newdata=testData,type="response")
logLike=logLike + sum((testData$Anastamotic.Leak*log(pred))+((1-testData$Anastamotic.Leak)*log(1-pred)) )
}
print(logLike)
#drops: Cancer
set.seed(1)
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
logLike=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+CAD.PAD+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
pred=predict.glm(model,newdata=testData,type="response")
logLike=logLike + sum((testData$Anastamotic.Leak*log(pred))+((1-testData$Anastamotic.Leak)*log(1-pred)) )
}
print(logLike)
set.seed(1)
folds=cut(seq(1,nrow(Data2)),breaks=j,labels=F)
pred=0
logLike=0
for (i in 1:j)
{
testIndexes=which(folds==i,arr.ind=T)
testData=Data2[testIndexes,]
trainData=Data2[-testIndexes,]
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
pred=predict.glm(model,newdata=testData,type="response")
logLike=logLike + sum((testData$Anastamotic.Leak*log(pred))+((1-testData$Anastamotic.Leak)*log(1-pred)) )
}
print(logLike)
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=Data2,family="binomial")
summary(model)
exp() 0.09148  +1.96*0.03115)
exp( 0.09148  +1.96*0.03115)
100*.164782
exp( 0.09148)
exp( 0.09148 -1.96*0.03115)
chance of death=10*P(16)
chance of death=11*P(16)
Cii=(1,5)
CI=c(1,5)
bmiBiggerThanAv=1
bmiBiggerThanAv*CI
bmiBiggerThanAv=5
bmiBiggerThanAv*CI
bmiBiggerThanAv=10
bmiBiggerThanAv*CI
exp(.084)
dropping RaceW does not make sense since its only one of a catagory column
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
modSum=summary(model)
names(modSum)
modSum$coefficients
modSum$coefficients[1]
modSum$coefficients.index[1]
names(modSum$coefficients)
modSum$coefficients
model$terms
model$terms[1]
attr(model$terms , "term.labels")
attr(model$terms , "term.labels")[1]
modSum$coefficients
modSum$coefficients[1,1]
modSum$coefficients[1,2]
model = glm(Anastamotic.Leak~Gender+BMI+Age+Race+Tobacco+DM+Albumin..g.dL.+Operative.Length,data=trainData,family="binomial")
modSum=summary(model)
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 2:9)
print(paste0(attr(model$terms , "term.labels")[i],"     ",modSum$coefficients[i,1],"     ",modSum$coefficients[i,2],"     ",
modSum$coefficients[i,3],"     ",modSum$coefficients[i,4],exp(modSum$coefficients[i,1]),
exp(modSum$coefficients[i,1]-1.96*modSum$coefficients[i,3]),
exp(modSum$coefficients[i,1]+1.96*modSum$coefficients[i,3])))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",modSum$coefficients[i,1],"     ",modSum$coefficients[i,2],"     ",
modSum$coefficients[i,3],"     ",modSum$coefficients[i,4],exp(modSum$coefficients[i,1]),
exp(modSum$coefficients[i,1]-1.96*modSum$coefficients[i,3]),
exp(modSum$coefficients[i,1]+1.96*modSum$coefficients[i,3])))
modSum=summary(model)
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",modSum$coefficients[i,1],"     ",modSum$coefficients[i,2],"     ",
modSum$coefficients[i,3],"     ",modSum$coefficients[i,4],"     ",exp(modSum$coefficients[i,1]),"     ",
exp(modSum$coefficients[i,1]-1.96*modSum$coefficients[i,3]),"     ",
exp(modSum$coefficients[i,1]+1.96*modSum$coefficients[i,3])))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",modSum$coefficients[i,1],"     ",modSum$coefficients[i,2],"     ",
modSum$coefficients[i,3],"     ",modSum$coefficients[i+1,4],"     ",exp(modSum$coefficients[i+1,1]),"     ",
exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3]),"     ",
exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",modSum$coefficients[i,1],"     ",modSum$coefficients[i,2],"     ",
modSum$coefficients[i,3],"     ",modSum$coefficients[i+1,4],"     ",(exp(modSum$coefficients[i+1,1])-1)*100,"     ",
(exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,"     ",
(exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100))
modSum$coefficients[i+1,1]
exp(modSum$coefficients[i+1,1])
exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,6),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,6),"     ",
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100),6))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100),8))
(exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100)
(exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100),8)
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(attr(model$terms , "term.labels")[i],"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100,8)))
length('Albumin..g.dL.')
length("Albumin..g.dL.")
size("Albumin..g.dL.")
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(str_pad(attr(model$terms , "term.labels")[i],14,"right"),"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100,8)))
install.packages("stringr")
library(stringr)
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(str_pad(attr(model$terms , "term.labels")[i],14,"right"),"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100,8)))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100,8)))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4])
for(i in 1:8)
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i,1],6),"     ",round(modSum$coefficients[i,2],6),"     ",
round(modSum$coefficients[i,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i,3])-1)*100),8)))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[,3])-1)*100),8)))
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[,3])-1)*100),8))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[,3])-1)*100),8))
for(i in 1:8)
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
printTable=function()
{
print("Variable:       Estimate:         STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
{
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
}
}
printTable
printTable()
printTable=function()
{
print("Variable:           Estimate:   STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
{
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
}
}
printTable()
printTable=function()
{
print("Variable:             Estimate:   STD Error:      Z-Value        Pr(>|z|)      %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
{
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
}
}
printTable()
printTable=function()
{
print("Variable:             Estimate:    STD Error:    Z-Value    Pr(>|z|)    %Change      Lower Bound       Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
{
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
}
}
printTable()
printTable=function()
{
print("Variable:             Estimate:    STD Error:    Z-Value    Pr(>|z|)    %Change           Lower Bound          Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
{
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
}
}
printTable()
printTable=function()
{
print("Variable:             Estimate:    STD Error:    Z-Value    Pr(>|z|)     %Change           Lower Bound     Upper Bound")
paste0("Intercept","     ",modSum$coefficients[1,1],"     ",modSum$coefficients[1,2],"     ",modSum$coefficients[1,3]
,"     ",modSum$coefficients[1,4],"     ",round((exp(modSum$coefficients[1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[1,1]-1.96*modSum$coefficients[1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[1,1]+1.96*modSum$coefficients[1,3])-1)*100),8))
for(i in 1:8)
{
print(paste0(str_pad(attr(model$terms , "term.labels")[i],17,"right"),"     ",round(modSum$coefficients[i+1,1],6),"     ",round(modSum$coefficients[i+1,2],6),"     ",
round(modSum$coefficients[i+1,3],6),"     ",round(modSum$coefficients[i+1,4],6),"     ",round((exp(modSum$coefficients[i+1,1])-1)*100,8),"     ",
round((exp(modSum$coefficients[i+1,1]-1.96*modSum$coefficients[i+1,3])-1)*100,8),"     ",
round(((exp(modSum$coefficients[i+1,1]+1.96*modSum$coefficients[i+1,3])-1)*100),8)))
}
}
printTable()
